import EventsScope from '../common/events/events-scope';
import {
  DEFAULT_GET_STATS_FILTER, EVENT_TRIGGERS, PEER_CONNECTION_STATE, STATS
} from '../constants';
import LoggerProxy from '../common/logs/logger-proxy';

import defaultStats from './global';

/**
  * Meeting High Packet Loss Event
  * Emitted when ever there is high packet loss detected
  * @event meeting:highPacketLoss
  * @type {Object}
  * @property {String} mediaType Type of media experiencing packet loss
  * @property {Number} packetLossRatio current packet loss ratio
  * @memberof StatsAnalyzer
  */

/**
 * Stats Analyzer class that will emit events based on detected quality
 *
 * @export
 * @class StatsAnalyzer
 * @extends {EventsScope}
 */
export default class StatsAnalyzer extends EventsScope {
  /**
   * Creates a new instance of StatsAnalyzer
   * @constructor
   * @public
   * @param {Object} config SDK Configuration Object
   */
  constructor(config) {
    super();
    this.statsResults = defaultStats;
    this.config = config;
    this.packetLossArraySender = {audio: [], video: [], share: []};
    this.packetLossArrayReceiver = {audio: [], video: [], share: []};
    this.peerConnection = null;
  }

  /**
   * Starts the stats analyzer on interval
   *
   * @public
   * @memberof StatsAnalyzer
   * @param {PeerConnection} peerConnection
   * @returns {void}
   */
  startAnalyzer(peerConnection) {
    this.peerConnection = peerConnection;
    this.peerConnection.onconnectionstatechange = () => {
      // Automatically stop once the connection state is closed
      if (this.peerConnection.connectionState === PEER_CONNECTION_STATE.CLOSED) {
        this.stopAnalyzer();
      }
    };

    this.statsInterval = setInterval(() => {
      this.getStatsAndParse(this.peerConnection);
    }, this.config.analyzerInterval);
  }

  /**
   * Cleans up the analyzer when done
   *
   * @public
   * @memberof StatsAnalyzer
   * @returns {void}
   */
  stopAnalyzer() {
    if (this.statsInterval) {
      clearInterval(this.statsInterval);
    }
    this.peerConnection = null;
  }

  /**
   * Parse a single result of get stats
   *
   * @private
   * @param {*} getStatsResult
   * @param {String} type
   * @returns {void}
   * @memberof StatsAnalyzer
   */
  parseGetStatsResult(getStatsResult, type) {
    if (!getStatsResult) {
      return;
    }

    switch (getStatsResult.type) {
      case 'outbound-rtp':
        this.processOutboundRTPResult(getStatsResult, type);
        break;
      case 'inbound-rtp':
        this.processInboundRTPResult(getStatsResult, type);
        break;
      case 'track':
        this.processTrackResult(getStatsResult, type);
        break;
      case 'remote-inbound-rtp':
      case 'remote-outbound-rtp':
        this.compareSentAndReceived(getStatsResult, type);
        break;
      default:
        break;
    }
  }

  /**
   * Filters the get stats results for types
   * @private
   * @param {Array} getStatsResults
   * @param {String} type
   * @returns {void}
   */
  filterAndParseGetStatsResults(getStatsResults, type) {
    const {types} = DEFAULT_GET_STATS_FILTER;

    getStatsResults.forEach((result) => {
      if (types.includes(result.type)) {
        this.parseGetStatsResult(result, type);
      }
    });
  }

  /**
   * Does a `getStats` on all the transceivers and parses the results
   *
   * @private
   * @memberof StatsAnalyzer
   * @param {*} pc
   * @returns {void}
   */
  getStatsAndParse(pc) {
    LoggerProxy.logger.info('StatsAnalyzer:index->getStatsAndParse#Collecting Stats');
    pc.videoTransceiver.sender.getStats().then((res) => {
      this.filterAndParseGetStatsResults(res, STATS.VIDEO_CORRELATE);
    });

    pc.videoTransceiver.receiver.getStats().then((res) => {
      this.filterAndParseGetStatsResults(res, STATS.VIDEO_CORRELATE);
    });

    pc.audioTransceiver.sender.getStats().then((res) => {
      this.filterAndParseGetStatsResults(res, STATS.AUDIO_CORRELATE);
    });

    pc.audioTransceiver.receiver.getStats().then((res) => {
      this.filterAndParseGetStatsResults(res, STATS.AUDIO_CORRELATE);
    });

    pc.shareTransceiver.sender.getStats().then((res) => {
      this.filterAndParseGetStatsResults(res, STATS.SHARE_CORRELATE);
    });

    pc.shareTransceiver.receiver.getStats().then((res) => {
      this.filterAndParseGetStatsResults(res, STATS.SHARE_CORRELATE);
    });
    LoggerProxy.logger.info('StatsAnalyzer:index->getStatsAndParse#Finished Collecting Stats');
  }

  /**
   * Processes OutboundRTP stats result and stores
   * @private
   * @param {*} result
   * @param {*} type
   * @returns {void}
   */
  processOutboundRTPResult(result, type) {
    const mediaType = type || 'audio';
    const sendrecvType = 'send';

    if (result.bytesSent) {
      let kilobytes = 0;

      if (!this.statsResults.internal[mediaType][sendrecvType].prevBytesSent) {
        this.statsResults.internal[mediaType][sendrecvType].prevBytesSent = result.bytesSent;
      }
      if (!this.statsResults.internal[mediaType][sendrecvType].framesEncoded) {
        this.statsResults.internal[mediaType][sendrecvType].framesEncoded = result.framesEncoded;
      }
      if (!this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded) {
        this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded = result.keyFramesEncoded;
      }

      const bytes = result.bytesSent - this.statsResults.internal[mediaType][sendrecvType].prevBytesSent;

      this.statsResults.internal[mediaType][sendrecvType].prevBytesSent = result.bytesSent;

      kilobytes = bytes / 1024;

      this.statsResults[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);
      this.statsResults[mediaType].bytesSent = kilobytes.toFixed(1);

      this.statsResults[mediaType][sendrecvType].framesEncoded = result.framesEncoded - this.statsResults.internal[mediaType][sendrecvType].framesEncoded;
      this.statsResults[mediaType][sendrecvType].keyFramesEncoded = result.keyFramesEncoded - this.statsResults.internal[mediaType][sendrecvType].keyFramesEncoded;

      this.statsResults.internal[mediaType].outboundRtpId = result.id;

      if (!this.statsResults.internal[mediaType][sendrecvType].packetsSent) {
        this.statsResults.internal[mediaType][sendrecvType].packetsSent = result.packetsSent;
      }

      this.statsResults[mediaType][sendrecvType].packetsSent = result.packetsSent - this.statsResults.internal[mediaType][sendrecvType].packetsSent;
      this.statsResults.internal[mediaType][sendrecvType].packetsSent = result.packetsSent;
      this.statsResults[mediaType][sendrecvType].totalPacketsSent = result.packetsSent;
    }
  }


  /**
   * Processes InboundRTP stats result and stores
   * @private
   * @param {*} result
   * @param {*} type
   * @returns {void}
   */
  processInboundRTPResult(result, type) {
    const mediaType = type || 'audio';
    const sendrecvType = 'recv';

    if (result.bytesReceived) {
      let kilobytes = 0;

      if (!this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived) {
        this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;
      }

      if (!this.statsResults.internal[mediaType][sendrecvType].pliCount) {
        this.statsResults.internal[mediaType][sendrecvType].pliCount = result.pliCount;
      }

      if (!this.statsResults.internal[mediaType][sendrecvType].packetsLost) {
        this.statsResults.internal[mediaType][sendrecvType].packetsLost = result.packetsLost;
      }

      if (!this.statsResults.internal[mediaType][sendrecvType].packetsReceived) {
        this.statsResults.internal[mediaType][sendrecvType].packetsReceived = result.packetsReceived;
      }

      if (!this.statsResults.internal[mediaType][sendrecvType].lastPacketReceivedTimestamp) {
        this.statsResults.internal[mediaType][sendrecvType].lastPacketReceivedTimestamp = result.lastPacketReceivedTimestamp;
      }

      if (!this.statsResults.internal[mediaType][sendrecvType].nackCount) {
        this.statsResults.internal[mediaType][sendrecvType].nackCount = result.nackCount;
      }

      const bytes = result.bytesReceived - (this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived);

      this.statsResults.internal[mediaType][sendrecvType].prevBytesReceived = result.bytesReceived;

      kilobytes = bytes / 1024;
      this.statsResults[mediaType][sendrecvType].availableBandwidth = kilobytes.toFixed(1);
      this.statsResults[mediaType].bytesReceived = kilobytes.toFixed(1);

      this.statsResults[mediaType][sendrecvType].pliCount = result.pliCount - this.statsResults.internal[mediaType][sendrecvType].pliCount;
      this.statsResults[mediaType][sendrecvType].currentPacketsLost = result.packetsLost - this.statsResults.internal[mediaType][sendrecvType].packetsLost;
      if (this.statsResults[mediaType][sendrecvType].packetsLost < 0) {
        this.statsResults[mediaType][sendrecvType].packetsLost = 0;
      }


      this.statsResults[mediaType][sendrecvType].totalPacketsReceived = result.packetsReceived;
      this.statsResults[mediaType][sendrecvType].packetsReceived = result.packetsReceived - this.statsResults.internal[mediaType][sendrecvType].packetsReceived;
      this.statsResults.internal[mediaType][sendrecvType].packetsReceived = result.packetsReceived;

      if (this.statsResults.internal[mediaType][sendrecvType].packetsReceived === 0) {
        LoggerProxy.logger.log(`No packets received for ${mediaType} `, this.statsResults.internal[mediaType][sendrecvType].packetsReceived);
      }

      //  Check the over all packet Lost ratio
      this.statsResults[mediaType][sendrecvType].avaragePacketsLostRatio = result.packetsLost / result.packetsReceived;
      this.statsResults[mediaType][sendrecvType].currentPacketLossRatio = this.statsResults[mediaType][sendrecvType].currentPacketsLost / this.statsResults.internal[mediaType][sendrecvType].packetsReceived;
      if (this.statsResults[mediaType][sendrecvType].currentPacketLossRatio > 3) {
        LoggerProxy.logger.log('Packets getting lost from the receiver ', this.statsResults[mediaType][sendrecvType].currentPacketLossRatio);
      }

      this.statsResults[mediaType][sendrecvType].totalPacketsLost = result.packetsLost;
      this.packetLossArrayReceiver[mediaType].push(this.statsResults[mediaType][sendrecvType].packetsLost);
      this.statsResults[mediaType][sendrecvType].lastPacketReceivedTimestamp = result.lastPacketReceivedTimestamp;
      this.statsResults[mediaType][sendrecvType].nackCount = result.nackCount - this.statsResults.internal[mediaType][sendrecvType].nackCount;
    }
  }

  /**
   * Process Track results
   *
   * @private
   * @param {*} result
   * @param {*} mediaType
   * @returns {void}
   * @memberof StatsAnalyzer
   */
  processTrackResult(result, mediaType) {
    const sendrecvType = result.remoteSource === true ? 'recv' : 'send';

    if (result.frameWidth && result.frameHeight) {
      this.statsResults.resolutions[mediaType][sendrecvType].width = result.frameWidth;
      this.statsResults.resolutions[mediaType][sendrecvType].height = result.frameHeight;
      this.statsResults.resolutions[mediaType][sendrecvType].framesSent = result.framesSent;
      this.statsResults.resolutions[mediaType][sendrecvType].hugeFramesSent = result.hugeFramesSent;
    }

    if (result.framesReceived && result.framesDecoded && result.framesDropped) {
      this.statsResults.resolutions[mediaType][sendrecvType].framesReceived = result.framesReceived;
      this.statsResults.resolutions[mediaType][sendrecvType].framesDecoded = result.framesDecoded;
      this.statsResults.resolutions[mediaType][sendrecvType].framesDropped = result.framesDropped;
    }

    if (result.trackIdentifier && mediaType !== 'audio') {
      this.statsResults.resolutions[mediaType][sendrecvType].trackIdentifier = result.trackIdentifier;
    }
  }

  /**
   *
   * @private
   * @param {*} result
   * @param {*} type
   * @returns {void}
   * @memberof StatsAnalyzer
   */
  compareSentAndReceived(result, type) {
    if (!type) {
      return;
    }

    const mediaType = type;

    if (!this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver) {
      this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;
    }

    const currentPacketLoss = result.packetsLost - this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver;

    this.statsResults.internal[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;
    this.statsResults[mediaType].send.packetsLostOnReceiver = currentPacketLoss;
    this.statsResults[mediaType].send.totalPacketsLostOnReceiver = result.packetsLost;
    this.statsResults[mediaType].send.jitter = result.jitter;
    this.statsResults[mediaType].send.roundTripTime = result.roundTripTime;
    this.packetLossArraySender[mediaType].push(currentPacketLoss);

    // Total packloss ratio on this video section of the call
    this.statsResults[mediaType].send.overAllPacketLossRatio = this.statsResults[mediaType].send.totalPacketsLostOnReceiver > 0 ? this.statsResults[mediaType].send.totalPacketsLostOnReceiver * 100 / this.statsResults[mediaType].send.totalPacketsSent : 0;

    this.statsResults[mediaType].send.currentPacketLossRatio = this.statsResults[mediaType].send.packetsLostOnReceiver > 0 ? this.statsResults[mediaType].send.packetsLostOnReceiver * 100 / this.statsResults[mediaType].send.packetsSent : 0;

    if (this.statsResults[mediaType].send.maxPacketLossRatio < this.statsResults[mediaType].send.currentPacketLossRatio) {
      this.statsResults[mediaType].send.maxPacketLossRatio = this.statsResults[mediaType].send.currentPacketLossRatio;
    }


    if (this.statsResults[mediaType].send.currentPacketLossRatio > this.config.videoPacketLossRatioThreshold && mediaType === STATS.VIDEO_CORRELATE) {
      // Trigger downgrade video callback
      LoggerProxy.logger.log('#StatsAnalyzer => Packet Loss is high ', this.statsResults[mediaType].send.currentPacketLossRatio);
      this.emit(
        {
          file: 'statsAnalyzer',
          function: 'compareSentAndReceived'
        },
        EVENT_TRIGGERS.MEETING_HIGH_PACKETLOSS,
        {
          mediaType,
          packetLossRatio: this.statsResults[mediaType].send.currentPacketLossRatio
        }
      );
    }
  }
}

